<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>effluence</title>
 <link href="https://sonnym.github.io//atom.xml" rel="self"/>
 <link href="https://sonnym.github.io//"/>
 <updated>2018-11-04T23:02:56-05:00</updated>
 <id>https://sonnym.github.io/</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>Privacy and Exposure, Gatekeepers and Privileged Consumers</title>
   <link href="https://sonnym.github.io//2018/01/03/privacy-and-exposure-gatekeeprs-and-privileged-consumers/?utm_medium=rss"/>
   <updated>2018-01-03T00:00:00-05:00</updated>
   <id>https://sonnym.github.io//2018/01/03/privacy-and-exposure-gatekeeprs-and-privileged-consumers</id>
   <content type="html">&lt;h2&gt;Encapsulation and Information Hiding&lt;/h2&gt;

&lt;p&gt;&lt;span&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Information_hiding&quot;&gt;Encapsulation&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Information_hiding&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/span&gt; &lt;/span&gt;
and
&lt;span&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Information_hiding&quot;&gt;information hiding&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Information_hiding&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/span&gt; &lt;/span&gt;,
are well known principles in object-oriented programming, common mechanisms for
maintaining DRY code and enforcing the
&lt;span&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;single responsibility principle&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/span&gt; &lt;/span&gt;.
While these foundational elements imbue the programmer with significant
expressive power and are essential for writing software with possessing anything  more than a
semblance of maintainability, they sometimes introduce restrictions that are
ultimately antithetical to those goals.  We, the writers of code,  should,
therefore, have a solid understanding of not only the standard use of these core
object-oriented principles, but also, and, perhaps, more importantly, where they
break down in addition to how and when to work around them.&lt;/p&gt;

&lt;p&gt;We will look at the ways in which we are able to subvert typical safety nets, and
this exploration of various means for exposing otherwise private members will
also serve as an introduction to some features of the Ruby programming language
less frequently encountered in day to day practice.  We will, ultimately,
introduce additional safety to objects that traditionally have little, in an
attempt to limit the use of our newfound powers for good.  Let us begin by
looking at the three levels of visibility available and how they are used via a
concrete, storybook example.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>On Maintainability: Gold Plating the Game of Life in Elm</title>
   <link href="https://sonnym.github.io//2017/06/18/on-maintainability-gold-plating-the-game-of-life-in-elm/?utm_medium=rss"/>
   <updated>2017-06-18T00:00:00-04:00</updated>
   <id>https://sonnym.github.io//2017/06/18/on-maintainability-gold-plating-the-game-of-life-in-elm</id>
   <content type="html">&lt;h2&gt;Launch Pad&lt;/h2&gt;

&lt;p&gt;In a previous
&lt;a href=&quot;/2017/05/22/revisiting-the-game-of-life-in-elm/&quot;&gt;article&lt;/a&gt;,
we explored how to write Conway&amp;#39;s Game of Life in the Elm programming language.
This example was predicated on one from several years before and compared the
differences in Elm over the intervening period of time.  Today, we will add some
entirely unnecessary features to the simple version of the program.&lt;/p&gt;

&lt;p&gt;This exercise in
&lt;span&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Gold_plating_(software_engineering)&quot;&gt;gold plating&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Gold_plating_(software_engineering)&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/span&gt; &lt;/span&gt;
will serve as a means of probing what it feels like to add new features to an
already established Elm program; these microcosmic changes will, hopefully, be
reflective of maintaining larger applications in Elm.  Throughout the course of
this article, we will consider successive diffs, starting from the original
implementation, while moving toward the final version.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Common Table Expressions in ActiveRecord: A Case Study of Quantiles</title>
   <link href="https://sonnym.github.io//2017/06/05/common-table-expressions-in-activerecord-a-case-study-of-quantiles/?utm_medium=rss"/>
   <updated>2017-06-05T00:00:00-04:00</updated>
   <id>https://sonnym.github.io//2017/06/05/common-table-expressions-in-activerecord-a-case-study-of-quantiles</id>
   <content type="html">&lt;h2&gt;Framing&lt;/h2&gt;

&lt;p&gt;Today, we are going to look at a straightforward real-world problem, and build a
comprehensive solution.  In doing so, we will start with some various naive
approaches as we increase our understanding of the underlying mechanics,
encounter some pitfalls, and, ultimately, approach a reasonable level of
sophistication and abstraction.  The stack we will be using for this case study
is
&lt;span&gt; &lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Ruby on Rails 5.1&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;http://rubyonrails.org/&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/span&gt; &lt;/span&gt;
with
&lt;span&gt; &lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL 9.6&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;https://www.postgresql.org/&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/span&gt; &lt;/span&gt;
for the database.&lt;/p&gt;

&lt;p&gt;Now, let me present to you the problem through which we will frame this
discussion:  given a number of student records, when displaying a single
student, also display the quintile into which their grade falls.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Continuations in Ruby - Part 1: First Class Objects</title>
   <link href="https://sonnym.github.io//2017/05/29/continuations-in-ruby-part-1-first-class-objects/?utm_medium=rss"/>
   <updated>2017-05-29T00:00:00-04:00</updated>
   <id>https://sonnym.github.io//2017/05/29/continuations-in-ruby-part-1-first-class-objects</id>
   <content type="html">&lt;h2&gt;Caveat Emptor&lt;/h2&gt;

&lt;p&gt;This is the first in an ongoing part series exploring the possibilities
presented to the programmer when continuations are a first class part of a
language.  These articles follow Chapter 20 of Paul Graham&amp;#39;s venerable treatise
&lt;span&gt; &lt;a href=&quot;http://www.paulgraham.com/onlisp.html&quot;&gt;On Lisp&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;http://www.paulgraham.com/onlisp.html&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/span&gt; &lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;While a powerful semantic construct, there is no secret that continuations are,
for good reason,
&lt;span&gt; &lt;a href=&quot;http://okmij.org/ftp/continuations/against-callcc.html&quot;&gt;thoroughly reviled&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;http://okmij.org/ftp/continuations/against-callcc.html&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/span&gt; &lt;/span&gt;.
In short, give us the ability to store the state of a computation and return to
it at a later point in the execution of our program.  This form of non-local
return (or
&lt;span&gt; &lt;a href=&quot;http://rosettacode.org/wiki/Jump_anywhere#Ruby&quot;&gt;jump anywhere&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;http://rosettacode.org/wiki/Jump_anywhere#Ruby&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/span&gt; &lt;/span&gt;)
can be compared to &lt;code&gt;goto&lt;/code&gt; statements of old or &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; semantics commonly
seen today.  Both of these language features, in fact, can be implemented in
terms of continuations, and in section 5.8.3 of
&lt;span&gt; &lt;a href=&quot;http://shop.oreilly.com/product/9780596516178.do&quot;&gt;The Ruby Programming Language&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;http://shop.oreilly.com/product/9780596516178.do&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/span&gt; &lt;/span&gt;,
the authors construct a BASIC inspired &lt;code&gt;goto&lt;/code&gt; function.  Today, when we &lt;code&gt;require
&amp;#39;continuation&amp;#39;&lt;/code&gt;, the interpreter will kindly inform us that &amp;#39;warning: callcc is
obsolete; use Fiber instead&amp;#39;.&lt;/p&gt;

&lt;p&gt;With continuations framed in this way, it should go without saying that, under
no circumstances whatsoever, should these curios be used in anything with any
degree of seriousness.  Why, then, should should we even bother?  Sometimes,
the simple fact that we should not is enough to make it worthwhile.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Revisiting the Game of Life in Elm</title>
   <link href="https://sonnym.github.io//2017/05/22/revisiting-the-game-of-life-in-elm/?utm_medium=rss"/>
   <updated>2017-05-22T00:00:00-04:00</updated>
   <id>https://sonnym.github.io//2017/05/22/revisiting-the-game-of-life-in-elm</id>
   <content type="html">&lt;h2&gt;Reflection&lt;/h2&gt;

&lt;p&gt;Over three years ago, I wrote an
&lt;a href=&quot;/2014/05/05/writing-game-of-life-in-elm/&quot;&gt;article&lt;/a&gt;
exploring how to write Conway&amp;#39;s Game of Life in the Elm programming language.
That article was originally written for version 0.12.3 and later updated for
0.14, but during the intervening span of time, Elm has matured significantly.
In the process, Elm has
&lt;span&gt; &lt;a href=&quot;http://elm-lang.org/blog/farewell-to-frp&quot;&gt;dropped its functional reactive roots&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;http://elm-lang.org/blog/farewell-to-frp&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/span&gt; &lt;/span&gt;
in favor of subscription-based concurrency.  Today, we will go through the same
exercise of writing the game of life, as a means of exploring the basics of a
simple modern Elm program.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hacking S-expressions into Ruby</title>
   <link href="https://sonnym.github.io//2015/02/26/hacking-s-expressions-into-ruby/?utm_medium=rss"/>
   <updated>2015-02-26T00:00:00-05:00</updated>
   <id>https://sonnym.github.io//2015/02/26/hacking-s-expressions-into-ruby</id>
   <content type="html">&lt;h2&gt;Background&lt;/h2&gt;

&lt;p&gt;&lt;span&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/S-expression&quot;&gt;S-expressions&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/S-expression&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/span&gt; &lt;/span&gt;
are a classic means of storing trees of data. Part of the original Lisp
specification, they have been a part of software engineering since the very
beginning. Other languages, notably Scheme and, more recently, Clojure, have
helped maintain the relevancy of this very simple means for representing data.&lt;/p&gt;

&lt;p&gt;In the spirit of
&lt;span&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Greenspun%27s_tenth_rule&quot;&gt;Greenspun&amp;#39;s tenth rule&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Greenspun%27s_tenth_rule&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/span&gt; &lt;/span&gt;,
we are going to attempt make first-class s-expressions in Ruby. There is
already a
&lt;span&gt; &lt;a href=&quot;http://rosettacode.org/wiki/S-Expressions#Ruby&quot;&gt;nice implementation&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;http://rosettacode.org/wiki/S-Expressions#Ruby&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/span&gt; &lt;/span&gt;
of s-expressions in Ruby, for reference, but they are not first-class, which
makes them less than ideal. As such, we are going to to see how far we can
push (read: abuse) the dynamic nature of the Ruby language, and investigate
just how much control we have over certain elements of its syntax.&lt;/p&gt;

&lt;p&gt;For anyone more interested in the result than the journey, be warned that this
attempt will not be successful, but some interesting results will be found
along the road to ultimate failure.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Using Defined Properties for Better AngularJS Directives</title>
   <link href="https://sonnym.github.io//2015/01/21/using-defined-properties-for-better-angularjs-directives/?utm_medium=rss"/>
   <updated>2015-01-21T00:00:00-05:00</updated>
   <id>https://sonnym.github.io//2015/01/21/using-defined-properties-for-better-angularjs-directives</id>
   <content type="html">&lt;h2&gt;On Directives&lt;/h2&gt;

&lt;p&gt;Directives in AngularJS are an exemplary solution for writing reusable
components in modern web applications. They allow us to encapsulate all the
messy business logic and expose a very clean, declarative interface to consumers
of the API. As with most tools for constructing abstractions, however,
directives have certain limitations that can lead to implementation details
leaking through, resulting in code that less
&lt;span&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/DRY_principle&quot;&gt;DRY&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/DRY_principle&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/span&gt; &lt;/span&gt;
and, consequently, less maintainable.&lt;/p&gt;

&lt;p&gt;There are, however, ways to work around these shortcomings and to build
simpler, more expressive interfaces to our directives. Leveraging a lesser known
feature of JavaScript, we can encapsulate additional details of our business
logic. This method is also well suited for building on top of third party
directives with a complex API by abstracting the details into a business
object. In doing so, our markup will become more in line with the ideal in
AngularJS, which
&lt;span&gt; &lt;a href=&quot;https://docs.angularjs.org/guide/introduction&quot;&gt;promotes declarative code&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;https://docs.angularjs.org/guide/introduction&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/span&gt; &lt;/span&gt;
over imperative. Without further ado, let us look at the current situation and
how we can improve our directives.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Barebones Architecture in Elm</title>
   <link href="https://sonnym.github.io//2014/12/23/barebones-architecture-in-elm/?utm_medium=rss"/>
   <updated>2014-12-23T00:00:00-05:00</updated>
   <id>https://sonnym.github.io//2014/12/23/barebones-architecture-in-elm</id>
   <content type="html">&lt;h2&gt;Motivation and Background&lt;/h2&gt;

&lt;p&gt;In the process of writing larger applications in
&lt;span&gt; &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;http://elm-lang.org/&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/span&gt; &lt;/span&gt;
I find it far too easy to initially focus on one small part of the problem
while losing perspective on the bigger picture. For instance, I will begin by
rendering a simple scene, followed by splitting out components, and finally
adding in signals.  While this is generally a good approach, in my mind,
it is sometimes difficult to retrofit patterns onto the basis of the application
I have already written.&lt;/p&gt;

&lt;p&gt;There are some really excellent resources covering the architecture of applications
in the Elm language. The
&lt;span&gt; &lt;a href=&quot;http://elm-lang.org/learn/Architecture.elm&quot;&gt;canonical article&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;http://elm-lang.org/learn/Architecture.elm&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt; &lt;a href=&quot;https://web.archive.org/web/20141223/http://elm-lang.org/learn/Architecture.elm&quot; target=&quot;_blank&quot; alt=&quot;Open on archive.org&quot; title=&quot;Open on archive.org&quot;&gt;&lt;svg class=&quot;octicon octicon-mirror&quot; viewBox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; width=&quot;16&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M15.5 4.7L8.5 0l-7 4.7c-.3.19-.5.45-.5.8V16l7.5-4 7.5 4V5.5c0-.34-.2-.61-.5-.8zm-.5 9.8l-6-3.25V10H8v1.25L2 14.5v-9l6-4V6h1V1.5l6 4v9zM6 7h5V5l3 3-3 3V9H6v2L3 8l3-3v2z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt; &lt;/span&gt; &lt;/span&gt;
on the subject can be found on the official Elm site and covers everything at
a high level. The best example is likely
&lt;span&gt; &lt;a href=&quot;https://evancz.github.io/elm-todomvc/&quot;&gt;TodoMVC&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;https://evancz.github.io/elm-todomvc/&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/span&gt; &lt;/span&gt;
(&lt;span&gt; &lt;a href=&quot;https://github.com/evancz/elm-todomvc&quot;&gt;source&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;https://github.com/evancz/elm-todomvc&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/span&gt; &lt;/span&gt;)
ported to Elm which uses many the concepts from the article to create a rich
and simple interface, showcasing just how powerful Elm is.  Another great and
extremely polished example is
&lt;span&gt; &lt;a href=&quot;http://dreamwriter.io/&quot;&gt;Dreamwriter&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;http://dreamwriter.io/&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/span&gt; &lt;/span&gt;
(&lt;span&gt; &lt;a href=&quot;https://github.com/rtfeldman/dreamwriter&quot;&gt;source&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;https://github.com/rtfeldman/dreamwriter&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/span&gt; &lt;/span&gt;),
which also incorporates the separation of components as outlined in the original
article.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Writing Game of Life in Elm</title>
   <link href="https://sonnym.github.io//2014/05/05/writing-game-of-life-in-elm/?utm_medium=rss"/>
   <updated>2014-05-05T00:00:00-04:00</updated>
   <id>https://sonnym.github.io//2014/05/05/writing-game-of-life-in-elm</id>
   <content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this article, we will walk through the steps for writing an implementation
of
&lt;span&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&quot;&gt;Conway&amp;#39;s Game of Life&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/span&gt; &lt;/span&gt;
in the
&lt;span&gt; &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;http://elm-lang.org/&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/span&gt; &lt;/span&gt;
 programming language.&lt;/p&gt;

&lt;p&gt;In doing so, we will learn about the basic principles involved with writing
programs in Elm, while grounding them in a concrete problem. We will be
building a single program in steps, so much of the source will be repeated
between the examples, but it will be more clear to present each step in its
entirety.&lt;/p&gt;

&lt;p&gt;I first became interested in Elm after seeing Evan Czaplicki&amp;#39;s
&lt;span&gt; &lt;a href=&quot;http://lanyrd.com/2013/mlocjs/sccwrp/&quot;&gt;talk&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;http://lanyrd.com/2013/mlocjs/sccwrp/&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/span&gt; &lt;/span&gt;
from mloc.js 2013, where he presented an overview of Elm and the compelling example
of how one would write a simple side-scroller in an extremely straight forward
fashion as a consequence of the core concept in Elm: signals.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Lazy Ruby</title>
   <link href="https://sonnym.github.io//2014/04/05/lazy-ruby/?utm_medium=rss"/>
   <updated>2014-04-05T00:00:00-04:00</updated>
   <id>https://sonnym.github.io//2014/04/05/lazy-ruby</id>
   <content type="html">&lt;h2&gt;Lazy Evaluation and Recursive Lists&lt;/h2&gt;

&lt;p&gt;In Haskell, it is possible to construct infinite lists via recursive
definition. This is only possible because Haskell uses
&lt;span&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Lazy_evaluation&quot;&gt;lazy evaluation&lt;/a&gt; &lt;span style=&quot;vertical-align: super&quot;&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Lazy_evaluation&quot; target=&quot;_blank&quot; alt=&quot;Pop Out&quot; title=&quot;Pop Out&quot;&gt;&lt;svg class=&quot;octicon octicon-link-external&quot; viewBox=&quot;0 0 12 16&quot; version=&quot;1.1&quot; width=&quot;12&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M11 10h1v3c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h3v1H1v10h10v-3zM6 2l2.25 2.25L5 7.5 6.5 9l3.25-3.25L12 8V2H6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/span&gt; &lt;/span&gt;
rather than eager evaluation. Otherwise, the entire list would need to be
calculated and the program would never terminate.&lt;/p&gt;

&lt;p&gt;Because Haskell makes it easy to define lists and is lazy, the code for
defining an infinite series is very simple. The following list represents
the fibonacci sequence.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hooks in AngularJS Controllers</title>
   <link href="https://sonnym.github.io//2014/02/05/hooks-in-angularjs-controllers/?utm_medium=rss"/>
   <updated>2014-02-05T00:00:00-05:00</updated>
   <id>https://sonnym.github.io//2014/02/05/hooks-in-angularjs-controllers</id>
   <content type="html">&lt;h2&gt;The Situation&lt;/h2&gt;

&lt;p&gt;Sometimes when working with nested scopes, you may encounter a situation in
which some scope action depends on the status of some arbitrarily nested
controller. This could be a multi-part form built from reusable components,
preventing the user from proceeding until complete, for example.&lt;/p&gt;

&lt;p&gt;An architecture that allows scopes nested within another scope to influence the
life cycle of the latter has one primary advantage, namely, greater separation
of concerns. A nested controller can supply functions for data validation and
formatting, while the parent controller defines functions for navigation and
accumulation of results. This leads to better modularity, as the parent
controller is isolated from the implementation of nested controllers, while the
latter are able to be used modularly in more contexts.&lt;/p&gt;
</content>
 </entry>
 

</feed>
